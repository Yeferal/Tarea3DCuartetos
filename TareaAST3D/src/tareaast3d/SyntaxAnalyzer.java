
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package tareaast3d;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;
import tareaast3d.Quadruple;
import tareaast3d.TableQuadruple;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntaxAnalyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolCode.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntaxAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntaxAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\005\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\014\005\001\002\000\006\002\ufffe\014" +
    "\ufffe\001\002\000\004\013\012\001\002\000\006\002\000" +
    "\014\005\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\006\002\uffff\014\uffff\001\002\000\014" +
    "\004\017\010\016\014\015\015\014\016\013\001\002\000" +
    "\016\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\001\002\000\016\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\001\002\000\016\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\001\002\000\014\004\017\010" +
    "\016\014\015\015\014\016\013\001\002\000\014\004\017" +
    "\010\016\014\015\015\014\016\013\001\002\000\014\006" +
    "\025\007\023\010\024\011\022\012\026\001\002\000\016" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\001" +
    "\002\000\014\004\017\010\016\014\015\015\014\016\013" +
    "\001\002\000\014\004\017\010\016\014\015\015\014\016" +
    "\013\001\002\000\014\004\017\010\016\014\015\015\014" +
    "\016\013\001\002\000\006\002\ufffd\014\ufffd\001\002\000" +
    "\014\004\017\010\016\014\015\015\014\016\013\001\002" +
    "\000\016\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\001\002\000\016\005\ufff8\006\ufff8\007\ufff8\010\ufff8" +
    "\011\022\012\026\001\002\000\016\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\022\012\026\001\002\000\016\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\001\002\000" +
    "\014\005\034\007\023\010\024\011\022\012\026\001\002" +
    "\000\016\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\001\002\000\016\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\022\012\026\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\010\002\006\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\020\006\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\020\006\034\001" +
    "\001\000\006\005\020\006\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\020\006\031\001\001\000" +
    "\006\005\020\006\030\001\001\000\006\005\020\006\027" +
    "\001\001\000\002\001\001\000\006\005\020\006\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //codigo
    TableQuadruple table = new TableQuadruple();

	public void syntax_error(Symbol s) {
		System.out.println("ERROR: Columna: "+(s.left+1)+", Fila: "+(s.right+1)+", Token: "+s.value);
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.out.println("ERRORr: Columna: "+(s.left+1)+", Fila: "+(s.right+1)+", Token: "+s.value);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntaxAnalyzer$actions {


    

  private final SyntaxAnalyzer parser;

  /** Constructor */
  CUP$SyntaxAnalyzer$actions(SyntaxAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzer$do_action_part00000000(
    int                        CUP$SyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzer$parser,
    java.util.Stack            CUP$SyntaxAnalyzer$stack,
    int                        CUP$SyntaxAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxAnalyzer$parser.done_parsing();
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CODIGO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 System.out.println(table.getText3D()); RESULT = table.getText3D();
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= CODIGO STRUCT_ASIGNACION_VAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 table.addQuadrupleJump(); 
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= STRUCT_ASIGNACION_VAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 table.addQuadrupleJump(); 
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRUCT_ASIGNACION_VAR ::= identificador igual OPERACION_ARITMETICA punto_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).value;
		
                            table.addQuadrupleAsig("=", b.toString(), a.toString());
                            RESULT = "t"+table.getCountT();
                        
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("STRUCT_ASIGNACION_VAR",2, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VALOR_DATA ::= numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VALOR_DATA ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VALOR_DATA ::= identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("VALOR_DATA",3, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA mas OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		
                            table.addQuadrupleArith("+", a.toString() , b.toString());
                            RESULT = "t"+table.getCountT();
                        
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA menos OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		
                            table.addQuadrupleArith("-", a.toString() , b.toString());
                            RESULT = "t"+table.getCountT();
                        
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA por OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 
                            table.addQuadrupleArith("*", a.toString() , b.toString());
                            RESULT = "t"+table.getCountT();
                        
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPERACION_ARITMETICA ::= OPERACION_ARITMETICA div OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		
                            table.addQuadrupleArith("/", a.toString() , b.toString());
                            RESULT = "t"+table.getCountT();
                        
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPERACION_ARITMETICA ::= menos OPERACION_ARITMETICA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		
                            table.addQuadrupleEnos("enos", "-"+a.toString());
                            RESULT = "t"+table.getCountT();
                        
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERACION_ARITMETICA ::= pa_a OPERACION_ARITMETICA pa_c 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-1)).value;
		 RESULT = a.toString(); 
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.elementAt(CUP$SyntaxAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERACION_ARITMETICA ::= VALOR_DATA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntaxAnalyzer$stack.peek()).value;
		 RESULT = a.toString(); 
              CUP$SyntaxAnalyzer$result = parser.getSymbolFactory().newSymbol("OPERACION_ARITMETICA",4, ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntaxAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntaxAnalyzer$do_action(
    int                        CUP$SyntaxAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxAnalyzer$parser,
    java.util.Stack            CUP$SyntaxAnalyzer$stack,
    int                        CUP$SyntaxAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntaxAnalyzer$do_action_part00000000(
                               CUP$SyntaxAnalyzer$act_num,
                               CUP$SyntaxAnalyzer$parser,
                               CUP$SyntaxAnalyzer$stack,
                               CUP$SyntaxAnalyzer$top);
    }
}

}
